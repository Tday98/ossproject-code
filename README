# Process and Memory Management System
Project for OS 4760 with Professor Mark Hauschild
Author: Tristan Day

## Overview
This project implements a process and memory management system using Unix/Linux system calls. The system consists of two main components:
- `oss.cpp`: The main process (Operating System Simulator) that manages processes and memory
- `worker.cpp`: Child processes that request memory access

The system uses the following key system calls:
- `fork()` and `execl()` for process creation
- Shared memory for system clock synchronization
- Message queues for inter-process communication

## Process Management Features
- Maximum of 18 concurrent user processes
- Process creation with configurable intervals
- Process termination after 1000 +/- 100 memory accesses
- Resource cleanup on process termination

## Usage
```bash
./oss [-h] [-n proc] [-s simul] [-i intervalInMsToLaunchChildren] [-f logfile]
```
Parameters:
- `-n`: Total number of processes to create
- `-s`: Maximum number of simultaneous processes
- `-i`: Interval in milliseconds between process launches
- `-f`: Log file name for OSS output

Example:
```bash
./oss -n 4 -i 250 -s 2 -f logfile.txt
```

## Key Functions

### Memory Management
- `handleMemoryRequest()`: Processes memory access requests
- `handlePageFault()`: Manages page faults and frame allocation
- `findLRUFrame()`: Implements LRU page replacement
- `findFreeFrame()`: Locates available frames

### Process Management
- `handleRequest()`: Processes resource requests
- `handleTerminate()`: Handles process termination

## Statistics and Monitoring
- Page fault rate
- Memory layout display every second
- Frame table and page table status

## Implementation Details
- Uses shared memory for system clock
- Message queues for process communication
- Signal handling for clean termination
- Resource cleanup on exit

## Known Issues
- Page tables don't fill up like they are expected to
