# Process Management System
Project for OS 4760 with Professor Mark Hauschild
Author: Tristan Day

## Overview
I use the following Unix/Linux system calls to launch child processes and manage them from a parent process: fork(), execl()
I removed my OOP based approach to handle the creating and management of child processes and decided to move to a more streamline functional approach.
This has project has two parts oss.cpp and worker.cpp. oss.cpp is the main process of the project whereas worker.cpp is the child process.
A demo call using this project is "./oss -n 4 -i 250 -s 2 -f logfile.txt" which would create 4 processes, 250 ms between launches, 2 simultaneous max and save data to a file called "logfile.txt".

### main()
Main hosts most of the interacting with the forking processes and also making calls to the other utility functions in the oss.cpp file.

### handleRequest()
This function just has the handling of the resource requests sent from a worker process. It checks to see if it is grantable if it is grant it else block the process because it is now stuck.

### handleRelease()
This rarely gets called but a process so graciously has allowed OSS to take back a resource that it had previously taken.

### handleTerminate()
This handles the termination message sent from a worker and removes all the information about this process.

### unblockBlockedQueue()
This will unblock a previously blocked process if its last request becomes grantable

### req_lt_avail()
code given from the lecture notes. I believe what this function does is simulate if the requests can be given or not.

### deadlock()
code given from lecture notes. runs through the current state of our resource table and determines whether or not a process will remain indefinitely blocked.

## Issues I've had this far
I'm not entirely sure my deadlock is working as intended. I really feel like I got this project close but not as close as I would have liked. I had a lot of issues wrapping my head around how to tackle this project but I'm proud of what I was able to accomplish.

## Next steps
I wish I could have gotten deadlock to work properly and gotten some of the aspects of the project done. I didn't have time to implement the verbosity of the logs which was a bummer.
